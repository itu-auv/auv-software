name: main docker images

on:
  workflow_call:
    inputs:
      image_type:
        description: 'Type of image to build [main, base]'
        required: true
        type: string
  
concurrency: 
  group: ${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.pull_request.number) || github.ref }}
  cancel-in-progress: true

env:
  ARCH64_CORE_IMAGE_TAG: dustynv/ros:noetic-ros-base-l4t-r35.2.1
  AMD64_CORE_IMAGE_TAG: ros:noetic-ros-base
  BASE_IMAGE_TAG: ghcr.io/itu-auv/auv-software-base
  IMAGE_TAG: ghcr.io/itu-auv/auv-software

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        host: [desktop, tegra]
        include:
          # configuration for desktop image
          - platform: linux/amd64
            architecture: amd64
            host: desktop
          # configuration for tegra image
          - platform: linux/arm64
            architecture: arm64
            host: tegra
    outputs:
      image_tag: ${{ steps.set_build_config.outputs.image_tag }}
      base_image: ${{ steps.set_build_config.outputs.base_image_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Containter Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set build configuration
        id: set_build_config
        run: |
          if [ ${{ inputs.image_type }} == 'main' ]; then
            BASE_IMAGE=${{ env.BASE_IMAGE_TAG }}:latest-${{ matrix.architecture }}
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            DOCKERFILE=./docker/Dockerfile.auv
          else
            if [ ${{ matrix.host }} == 'desktop' ]; then
              BASE_IMAGE=${{ env.AMD64_CORE_IMAGE_TAG }}
            else
              BASE_IMAGE=${{ env.ARCH64_CORE_IMAGE_TAG }}
            fi
            IMAGE_TAG=${{ env.BASE_IMAGE_TAG }}
            DOCKERFILE=./docker/Dockerfile.auv-base
          fi

          echo "base_image_tag=$BASE_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "dockerfile=$DOCKERFILE" >> $GITHUB_OUTPUT
      - name: Build and push ${{ inputs.image_type }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.set_build_config.outputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name == 'push' && matrix.host == 'desktop' }}
          build-args: |
            BASE_IMAGE=${{ steps.set_build_config.outputs.base_image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          tags: |
            ${{ steps.set_build_config.outputs.image_tag }}:latest-${{ matrix.architecture }}
            ${{ steps.set_build_config.outputs.image_tag }}:${{ github.sha }}-${{ matrix.architecture }}

  build-and-push-arm64:
    runs-on: self-hosted
    
    strategy:
      matrix:
        host: [tegra]
        include:
          - platform: linux/arm64
            architecture: arm64
            host: tegra

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0
        with:
          driver: docker

      - name: Login to Github Containter Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set build configuration
        id: set_build_config
        run: |
          if [ ${{ inputs.image_type }} == 'main' ]; then
            BASE_IMAGE=${{ env.BASE_IMAGE_TAG }}:latest-${{ matrix.architecture }}
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            DOCKERFILE=./docker/Dockerfile.auv
          else
            if [ ${{ matrix.host }} == 'desktop' ]; then
              BASE_IMAGE=${{ env.AMD64_CORE_IMAGE_TAG }}
            else
              BASE_IMAGE=${{ env.ARCH64_CORE_IMAGE_TAG }}
            fi
            IMAGE_TAG=${{ env.BASE_IMAGE_TAG }}
            DOCKERFILE=./docker/Dockerfile.auv-base
          fi

          echo "base_image_tag=$BASE_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "dockerfile=$DOCKERFILE" >> $GITHUB_OUTPUT

      - name: Build and push ${{ inputs.image_type }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.set_build_config.outputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name == 'push' }}
          build-args: |
            BASE_IMAGE=${{ steps.set_build_config.outputs.base_image_tag }}
          provenance: false
          sbom: false
          tags: |
            ${{ steps.set_build_config.outputs.image_tag }}:latest-${{ matrix.architecture }}
            ${{ steps.set_build_config.outputs.image_tag }}:${{ github.sha }}-${{ matrix.architecture }}

  create-manifests:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-and-push-arm64]
    if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Github Containter Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create SHA manifest and push
        run: |
          image_tag=${{ needs.build-and-push.outputs.image_tag }}
          docker manifest create \
          $image_tag:${{ github.sha }} \
            --amend $image_tag:${{ github.sha }}-amd64 \
            --amend $image_tag:${{ github.sha }}-arm64
          docker manifest push $image_tag:${{ github.sha }}

      - name: Create latest manifest and push
        run: |
          image_tag=${{ needs.build-and-push.outputs.image_tag }}
          docker manifest create \
          $image_tag:latest \
            --amend $image_tag:latest-amd64 \
            --amend $image_tag:latest-arm64
          docker manifest push $image_tag:latest
